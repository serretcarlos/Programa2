
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

    //&p-Main
    class Program
    {
        //&i
        static void Main(string[] args)
        {
            double dof;
            double x;
            dof = 0;
            x = 0;

            try
            {
                x = double.Parse(Console.ReadLine());
                dof = double.Parse(Console.ReadLine());
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            if (dof <= 0 || x < 0)
            {
                Console.WriteLine("Alguno de los datos ingresados es incorrecto. Presione enter para salir e intente de nuevo.");
            }
            else
            {
                double num_seg;
                double resta;
                num_seg = 10;

                Simpson simpsonA = new Simpson();
                Simpson simpsonB = new Simpson(x, dof, num_seg + 10);
                resta = simpsonA.FuncionP() - simpsonB.FuncionP();
                do
                {
                    simpsonA = simpsonB;
                    num_seg = num_seg + 10;
                    simpsonB = new Simpson(x, dof, num_seg);
                    resta = simpsonA.FuncionP() - simpsonB.FuncionP();
                }
                while (Math.Abs(resta) >= 0.0000001);

                Console.WriteLine("x = " + x.ToString("N5") + "\ndof = " + dof + "\np = " + Math.Round(simpsonB.FuncionP(),5).ToString("N5"));
            }

            Console.ReadLine();
        }
    }
    //&p-Distribucion
    class Distribucion
    {
        private double dX;
        private double dof;
        //&i
        public Distribucion()
        {
            dX = 0;
            dof = 0;
        }
        //&i
        public Distribucion(double dX, double dof)
        {
            this.dX = dX;
            this.dof = dof;
        }
        //&i
        public double FuncionF()
        {
            double resultado, dXi, dY, dZ, dA;
            resultado = 0;

            dXi = 1.0 * ((dof + 1) * 0.5);
            dA = FuncionGamma(dXi);
            dY = Math.Pow(dof * Math.PI, 0.5);
            dXi = 1.0 * (dof * 0.5);
            dZ = FuncionGamma(dXi);
            resultado = dA / (dY * dZ);
            dXi = 1.0 + (Math.Pow(dX, 2) / dof);
            dY = -1.0 * ((dof + 1) * 0.5);
            dA = Math.Pow(dXi, dY);
            resultado = resultado * dA;
            return resultado;
        }

        //&i
        public double FuncionGamma(double dx)
        {
            if (dx == 0)
            {
                return -1;
            }
            if (dx == 1.0)
            {
                return 1;
            }
            if (dx == 0.5)
            {
                return Math.Sqrt(Math.PI);
            }
            else
            {
                return (dx - 1) * FuncionGamma(dx - 1);
            }
        }
    }

    //&p-Simpson
    class Simpson
    {
        private double x;       //rango que se calculará ( 0 a x )
        private double dof;     //grado de libertad
        private double num_seg; //número de segmentos
        private double width;   //ancho del segmento

        //&i
        public Simpson()
        {
            x = 0;
            dof = 0;
            num_seg = 0;
            width = 0;
        }
        //&i
        public Simpson(double x, double dof, double num_seg)
        {
            this.x = x;
            this.dof = dof;
            this.num_seg = num_seg;
            this.width = this.x / this.num_seg;
        }
        //&i
        public double FuncionP()
        {
            double dXi, resultado;
            int multiplier;
            dXi = 0;
            resultado = 0;
            Distribucion distribucion;

            for (int i = 0; i <= num_seg; i++)
            {
                distribucion = new Distribucion(dXi, dof);

                if (i == 0 || i == num_seg)
                {
                    multiplier = 1;
                }
                else if (i % 2 == 0)
                {
                    multiplier = 2;
                }
                else
                {
                    multiplier = 4;
                }
                resultado = resultado + (((width / 3) * multiplier * distribucion.FuncionF()));
                dXi = dXi + width;
            }
            return resultado;
        }
    }


